
Language :

	Communication  56 ,26

Programming Language:

		POP               OOP
B,BCPL,C....			Java,python,.net......


		Performance			inheritance,polymorphisam
		Security			abstraction,encapsulation


Python:guido van russam 1989
  feb 20 1991 python 1.x

				python 3.x



java  53

class Welcome
{
public static void main(String args[])
{
System.out.println("welcome to java");
}

}
compaliation 
execution JVM

python 33 
print("welcome to python")



1.Functional Programming features from  C 

2.oops from C++

3.scripting lang  features Shell script

4.module programming from modula-3

		C, ABC


Applications:
============

1)standalone or desktop  

2)web applications		django,flask...URL

3) DB Applications   PDBC

4)IOT

5)ML

6)AI


Features:
=========

	* simple

	* freeware and opensource   Jython

	* High level PL
	
	* Platform Independent    .net-->microsoft
		
	WORA					Windows	11    --->   windows 10

						linux
	* Dynamic Typed

				String name="sandeep";//static typed
				int age=30;
				
				
				name="suresh"//dynamic typed 
				age2=30

    * Intertreted PVM

	* Rich inbuilt library
	
	
Idenitifiers:
=============	
	
		names

  a-z,A-Z
  0-9,_
  
  
  _ -->private
  
reserved words
 33
 
 True,False,None
 
 if,del,else,elif,for,while,........
 
 
 
 DATATYPES:
 =========
 
		name
		id
		salary
		address
		gender
		mail
		.....
 
 datatypes
 
	int   int()
	float
	complex
	bool  
	str
	Bytes  / Array 
	range(0..3)
	
	list
	tuple
	set
	dict
	frozenset
	None

		type()
		id()-->address of object
		print()
		input()
		len()
 
 typecasting
 
 
 name="sandeep"
	name="suresh"
 
 
 
 List:
 
		group of values as a single unit where duplicates are allowed and insertion order is preserved 
 
 
	1)duplicates are allowed 
	2)insertion order is followed
	3)hatergenous and homogeneous values are allowed
	4)growable in nature
	5) define by using square brackets []
	*6)list is muttable(append)
	
  Tuple:
 
		group of values as a single unit where duplicates are allowed and insertion order is preserved 
 
 
	1)duplicates are allowed 
	2)insertion order is followed
	3)hetergenous and homogeneous values are allowed
	4) define by using ()
	*5)Tuple is imuttable
 
  Set:
 
		group of values as a single unit where duplicates are not allowed and insertion order is not preserved 
 
 
	1)duplicates are not allowed 
	2)insertion order is not followed
	3)hetergenous and homogeneous values are allowed
	4)growable in nature
	5) define by using  {}
	*6)set is muttable
 
  FrozenSet:
 
		group of values as a single unit where duplicates are not allowed and insertion order is not preserved 
 
 
	1)duplicates are not allowed 
	2)insertion order is not followed
	3)hetergenous and homogeneous values are allowed
	4) define by using  {()}
	*5)frozen set is imuttable
 
 
 Dict:
 ======
 employees={123:"sandeep",124:"mahesh",125:"suresh"}
 
		group of objects as key value pair
		
		1)duplicates key is not allowed and value can be duplicate
		2){key:value}
		3)dict is muttable
		4)no order
 None
 
 Flow Control:
 ============
 
	if condition:
		stmt1
		stmt2
		.....
		
 
 if condition:
		stmt1
		stmt2
		.....
 		
 else:		
	
	
	
	
 Functions:
 ============
 
 Reusability
 
 
 def sayHello:
	return 1234
 
 
 variables
	2 types variables
	local  global
	a=123;
 
 
 username 	kpmg
 
 password   kpmg@123
 
 
 
 LOGIN SUCCESS 
 
 ENTER VALID CREDENTIALS
 
 
 
 slice operator 
 
	list2=list1[start:stop:step]
 
 
 >>> emps=["mahesh","suresh","rajesh","naresh"]
>>> type(emps)
<class 'list'>
>>> print(emps[0])
mahesh
>>> print(emps[-1])
naresh
>>> print(emps[-2])
rajesh
>>> print(emps[2])
rajesh
>>> numbers=[2,3,4,5,6,7,8,35,4,3,2]
>>> type(numbers)
<class 'list'>
>>> print(numbers[2:7:2])
[4, 6, 8]
>>> print(numbers[2:7])
[4, 5, 6, 7, 8]
>>> print(numbers[2:7:3])
[4, 7]
>>> print(len(numbers))
11
>>> print(numbers.count(2))
2
>>> print(numbers.count(7))
1
>>> print(numbers.index(35))
7
>>> numbers.append("sandeep")
>>> print(len(numbers))
12
>>> print(numbers.index("sandeep"))
11
>>> numbers.insert(0,"kpmg")
>>> print(numbers.index("kpmg"))
0
>>> numbers.remove("sandeep")
>>> print(len(numbers))
12
>>> print(numbers.index("sandeep"))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: 'sandeep' is not in list
>>> values=["suresh","mahesh","naresh"]
>>> values1=["hi","hello","how r u"]
>>> values.extend(values1)
>>> print(values)
['suresh', 'mahesh', 'naresh', 'hi', 'hello', 'how r u']
>>> values.remove(hi)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'hi' is not defined
>>> values.remove("hi")
>>> values.remove("hi")
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: list.remove(x): x not in list
>>> values.pop("hello")
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'str' object cannot be interpreted as an integer
>>> print(values.pop());
how r u
>>> print(values)
['suresh', 'mahesh', 'naresh', 'hello']
>>> print(values.pop());
hello
>>> print(values.pop());
naresh
>>> print(values.pop());
mahesh
>>> print(values.pop());
suresh
>>> print(values)
[]
>>> print(values.pop());
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
IndexError: pop from empty list
>>> print(numbers)
['kpmg', 2, 3, 4, 5, 6, 7, 8, 35, 4, 3, 2]
>>> print(numbers.reverse())
None
>>> print(numbers)
[2, 3, 4, 35, 8, 7, 6, 5, 4, 3, 2, 'kpmg']
>>> print(numbers.index("kpmg"))
11
>>> numbers.pop()
'kpmg'
>>> print(numbers)
[2, 3, 4, 35, 8, 7, 6, 5, 4, 3, 2]
>>> numbers.sort()
>>> print(numbers)
[2, 2, 3, 3, 4, 4, 5, 6, 7, 8, 35]
 
 
 filter(function,sequence)
 
 def isEven(x):
	if x%2==0:
		return true
	else 
		return false
		
		
list1=[0,2,4,3,5,6,9,10,30]		
l=list(filter(isEven,list1))
print(l1) 
 
 
 
OOPS:
=====


				OOPS        
			methodology
 OOPL
 python
 
		inheritance,polymorphisam,abstraction,encapsulation,class,object
		
class:
=======
building plan    model,blueprint 

building house		object
		
 
 class is combination variables(data/data members) and memeber functions(behaviour)
 
 
 
 class Helloworld:
	age=30
	name="sandeep"
	def printDetails():
		print.....
 
 local 
 
 global
	instance
	static 
	
	
	self
	
	__init__   constructor
 
 
 instance method  self
 static method		@Staticmethod
 class method  cls @Classmethod
 
 
 
 
 Inheritance:
 ============
 
	CODE REUSABILITY-->performance 
 
 
 class A:
 
	...10
	....
	....
	....
 
 
 class B(A):
 
	.....
	.....10
	....
 
 
 
 
 Exception handling:
 ===================
 
 
 its mechanisam of converting system defined error messages into user friendly error messages  
 
	
	ORA012345 
 
 
 1.normal termination
 2.user friendly error messages
 
 
 
 class Test:
 1
 2......... stop exe throw system defined error message
 3
 4
 5
 6
 7
 8
 9
 10
 .....
 abnormal termination
 
 
 Datbase :container 
 
 Data 
	empid empname salary address email...........columns
	1		sandeep 1000	.....rows /records/data
	
					ORACLE,MYSQL,DB2,POSTGRES,.....
 
 
 
 mysql  RDBMS   table-->rows & columns
 
 empid empname salary address email
 
 SQL
 
 DDL	create,alter,drop,truncate,rename
 
 DML    insert,update,delete
  
 DRL  select
 
 DCL	grant,revoke
 
 TCL	commit,rollback
 

 
create database kpmg;
use kpmg;
create table employees(empid int,ename varchar(10),salary int,eadd varchar(10));
describe emps;
alter table employees add designation varchar(10);
alter table employees drop column eadd ;
alter table employees change empid empno int;
alter table employees rename to emps;
drop table emps;
truncate table employees;# it will make table as empty 
#DML
insert into employees values(123,"mahesh",20000,"hyderabad");
insert into employees values(124,"naresh",40000,"banglore");
insert into employees values(125,"rajesh",50000,"hyderabad");
insert into employees values(126,"somesh",30000,"delhi");
insert into employees values(127,"suresh",35000,"banglore");
insert into employees values(128,"hitesh",45000,"delhi");
select * from employees;
select ename from employees;
truncate table employees;
update employees set salary=salary+5000 where eadd='hyderabad';
update employees set salary=salary+1000;
delete from employees where eadd="delhi" ;
delete from employees;
select * from employees where eadd="hyderabad";
select * from employees where salary<=30000;
select * from employees where ename="rajesh";

select max(salary) from employees;
select min(salary) from employees;
select avg(salary) from employees;
select sum(salary) from employees;
select * from employees order by eadd ;

 
 
 
PDBC:
======
 
 ProductManagementApplication
 
 1.add product	
					insert query
 2.update product  
							pid
							price
 3.delete productById
							pid
 4.get productById
							pid
 5.get all products
						select * from product_info
 
 
 class Product:
	productId				products_info
	productName
	productPrice
	productDesc
	productCategory
 
 
 
 
 x.py		z.py
			import 
			
 
 py --->pyc--->intepreter 
 
 
 
 file--->name message 232
								BYTEDATA
 pickling 		: python object --->file 
 unpickling 	: 
 
 
 
 Regular Expressions:
 ====================
 character classes:
------------------
[abc]-->either a or b or c

[^abc]--> other than a or b or c

[a-z]-->any lower case alphabet symbol

[A-Z]-->any upper case alphabet symbol

[a-zA-Z]-->any alphabet symbol

[0-9]-->any digit from 0-9

[a-zA-z0-9]-->any alpha numeric character

[^a-zA-z0-9]-->except alpha numeric character(special symbols)


pre defined char classes:
=========================== compiler will treat \ as escape char so we have to use  \\s

\s-->searching for space char..

\S-->except space char

\d -->any digit from 0-9

\D-->except digits any char

\w-->any word char(alpha numeric)

\W-->except word char (special symbols)

.-->any char



Quantifiers:
------------- tospecify number of occurences 


a       exactly one a

a+     atelast one a

a*    any number of a's including zero number also

a?     atmost one a
 RE
 
 if we want to represent group strings according to some patterrn .....
 
 password
 cpassword				
 
 
		compile() :compile a pattern into regexobj
		finditer()
			start()
			end() end+1
			group()
 
 
 
		pattern=re.compile("ab")
 
	matcher=pattern.finditer("ababaabbaab")
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 